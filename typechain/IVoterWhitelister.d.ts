/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IVoterWhitelisterInterface extends ethers.utils.Interface {
  functions: {
    "defaultMaxVotersForFtso()": FunctionFragment;
    "getFtsoWhitelistedPriceProviders(uint256)": FunctionFragment;
    "getFtsoWhitelistedPriceProvidersBySymbol(string)": FunctionFragment;
    "maxVotersForFtso(uint256)": FunctionFragment;
    "requestFullVoterWhitelisting(address)": FunctionFragment;
    "requestWhitelistingVoter(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "defaultMaxVotersForFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotersForFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFullVoterWhitelisting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWhitelistingVoter",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFullVoterWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWhitelistingVoter",
    data: BytesLike
  ): Result;

  events: {
    "VoterRemovedFromWhitelist(address,uint256)": EventFragment;
    "VoterWhitelisted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoterRemovedFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterWhitelisted"): EventFragment;
}

export class IVoterWhitelister extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVoterWhitelisterInterface;

  functions: {
    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    maxVotersForFtso(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestFullVoterWhitelisting(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

  getFtsoWhitelistedPriceProviders(
    _ftsoIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFtsoWhitelistedPriceProvidersBySymbol(
    _symbol: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  maxVotersForFtso(
    _ftsoIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestFullVoterWhitelisting(
    _voter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWhitelistingVoter(
    _voter: string,
    _ftsoIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    maxVotersForFtso(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestFullVoterWhitelisting(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[]] & {
        _supportedIndices: BigNumber[];
        _success: boolean[];
      }
    >;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    VoterRemovedFromWhitelist(
      voter?: null,
      ftsoIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; ftsoIndex: BigNumber }
    >;

    VoterWhitelisted(
      voter?: null,
      ftsoIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; ftsoIndex: BigNumber }
    >;
  };

  estimateGas: {
    defaultMaxVotersForFtso(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVotersForFtso(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestFullVoterWhitelisting(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultMaxVotersForFtso(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVotersForFtso(
      _ftsoIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestFullVoterWhitelisting(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
