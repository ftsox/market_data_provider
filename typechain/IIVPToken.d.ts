/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IIVPTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "batchVotePowerOfAt(address[],uint256)": FunctionFragment;
    "cleanupBlockNumber()": FunctionFragment;
    "decimals()": FunctionFragment;
    "delegate(address,uint256)": FunctionFragment;
    "delegateExplicit(address,uint256)": FunctionFragment;
    "delegatesOf(address)": FunctionFragment;
    "delegatesOfAt(address,uint256)": FunctionFragment;
    "delegationModeOf(address)": FunctionFragment;
    "governanceVotePower()": FunctionFragment;
    "name()": FunctionFragment;
    "readVotePowerContract()": FunctionFragment;
    "revokeDelegationAt(address,uint256)": FunctionFragment;
    "setCleanerContract(address)": FunctionFragment;
    "setCleanupBlockNumber(uint256)": FunctionFragment;
    "setCleanupBlockNumberManager(address)": FunctionFragment;
    "setGovernanceVotePower(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "totalVotePower()": FunctionFragment;
    "totalVotePowerAt(uint256)": FunctionFragment;
    "totalVotePowerAtCached(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "undelegateAll()": FunctionFragment;
    "undelegateAllExplicit(address[])": FunctionFragment;
    "undelegatedVotePowerOf(address)": FunctionFragment;
    "undelegatedVotePowerOfAt(address,uint256)": FunctionFragment;
    "votePowerFromTo(address,address)": FunctionFragment;
    "votePowerFromToAt(address,address,uint256)": FunctionFragment;
    "votePowerOf(address)": FunctionFragment;
    "votePowerOfAt(address,uint256)": FunctionFragment;
    "votePowerOfAtCached(address,uint256)": FunctionFragment;
    "writeVotePowerContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVotePowerOfAt",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateExplicit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegatesOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegatesOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationModeOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readVotePowerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegationAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumberManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceVotePower",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAtCached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAllExplicit",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votePowerOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtCached",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeVotePowerContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationModeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readVotePowerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumberManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAllExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeVotePowerContract",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IIVPToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIVPTokenInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchVotePowerOfAt(
      _owners: string[],
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      _to: string,
      _bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateExplicit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegatesOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        _delegateAddresses: string[];
        _bips: BigNumber[];
        _count: BigNumber;
        _delegationMode: BigNumber;
      }
    >;

    delegatesOfAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        _delegateAddresses: string[];
        _bips: BigNumber[];
        _count: BigNumber;
        _delegationMode: BigNumber;
      }
    >;

    delegationModeOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governanceVotePower(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    readVotePowerContract(overrides?: CallOverrides): Promise<[string]>;

    revokeDelegationAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCleanerContract(
      _cleanerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCleanupBlockNumber(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCleanupBlockNumberManager(
      _cleanupBlockNumberManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernanceVotePower(
      _governanceVotePower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVotePower(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotePowerAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVotePowerAtCached(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegateAllExplicit(
      _delegateAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undelegatedVotePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    undelegatedVotePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerFromTo(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerFromToAt(
      _from: string,
      _to: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votePowerOfAtCached(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeVotePowerContract(overrides?: CallOverrides): Promise<[string]>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(
    _owner: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchVotePowerOfAt(
    _owners: string[],
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegate(
    _to: string,
    _bips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateExplicit(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegatesOf(
    _who: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber] & {
      _delegateAddresses: string[];
      _bips: BigNumber[];
      _count: BigNumber;
      _delegationMode: BigNumber;
    }
  >;

  delegatesOfAt(
    _who: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber] & {
      _delegateAddresses: string[];
      _bips: BigNumber[];
      _count: BigNumber;
      _delegationMode: BigNumber;
    }
  >;

  delegationModeOf(_who: string, overrides?: CallOverrides): Promise<BigNumber>;

  governanceVotePower(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  readVotePowerContract(overrides?: CallOverrides): Promise<string>;

  revokeDelegationAt(
    _who: string,
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCleanerContract(
    _cleanerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCleanupBlockNumber(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCleanupBlockNumberManager(
    _cleanupBlockNumberManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernanceVotePower(
    _governanceVotePower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotePowerAt(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVotePowerAtCached(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegateAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegateAllExplicit(
    _delegateAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undelegatedVotePowerOf(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  undelegatedVotePowerOfAt(
    _owner: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerFromTo(
    _from: string,
    _to: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerFromToAt(
    _from: string,
    _to: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  votePowerOfAt(
    _owner: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votePowerOfAtCached(
    _owner: string,
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeVotePowerContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchVotePowerOfAt(
      _owners: string[],
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegate(
      _to: string,
      _bips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateExplicit(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegatesOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        _delegateAddresses: string[];
        _bips: BigNumber[];
        _count: BigNumber;
        _delegationMode: BigNumber;
      }
    >;

    delegatesOfAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        _delegateAddresses: string[];
        _bips: BigNumber[];
        _count: BigNumber;
        _delegationMode: BigNumber;
      }
    >;

    delegationModeOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceVotePower(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    readVotePowerContract(overrides?: CallOverrides): Promise<string>;

    revokeDelegationAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCleanerContract(
      _cleanerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCleanupBlockNumber(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCleanupBlockNumberManager(
      _cleanupBlockNumberManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceVotePower(
      _governanceVotePower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    undelegateAll(overrides?: CallOverrides): Promise<void>;

    undelegateAllExplicit(
      _delegateAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    undelegatedVotePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    undelegatedVotePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromTo(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _from: string,
      _to: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    votePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeVotePowerContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchVotePowerOfAt(
      _owners: string[],
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cleanupBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _to: string,
      _bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateExplicit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegatesOf(_who: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegatesOfAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationModeOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    readVotePowerContract(overrides?: CallOverrides): Promise<BigNumber>;

    revokeDelegationAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCleanerContract(
      _cleanerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCleanupBlockNumber(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCleanupBlockNumberManager(
      _cleanupBlockNumberManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernanceVotePower(
      _governanceVotePower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePower(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotePowerAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotePowerAtCached(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegateAllExplicit(
      _delegateAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undelegatedVotePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    undelegatedVotePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromTo(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerFromToAt(
      _from: string,
      _to: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    votePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerOfAtCached(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeVotePowerContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchVotePowerOfAt(
      _owners: string[],
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cleanupBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _to: string,
      _bips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateExplicit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegatesOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatesOfAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationModeOf(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceVotePower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readVotePowerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeDelegationAt(
      _who: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCleanerContract(
      _cleanerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCleanupBlockNumber(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCleanupBlockNumberManager(
      _cleanupBlockNumberManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceVotePower(
      _governanceVotePower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotePowerAt(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotePowerAtCached(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegateAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegateAllExplicit(
      _delegateAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undelegatedVotePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    undelegatedVotePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerFromTo(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerFromToAt(
      _from: string,
      _to: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAt(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerOfAtCached(
      _owner: string,
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeVotePowerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
