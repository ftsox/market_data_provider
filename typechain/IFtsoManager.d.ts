/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IFtsoManagerInterface extends ethers.utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "getCurrentPriceEpochData()": FunctionFragment;
    "getCurrentRewardEpoch()": FunctionFragment;
    "getFtsos()": FunctionFragment;
    "getPriceEpochConfiguration()": FunctionFragment;
    "getPriceSubmitter()": FunctionFragment;
    "getRewardEpochVotePowerBlock(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFtsos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtsos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;

  events: {
    "DistributingRewardsFailed(address,uint256)": EventFragment;
    "FallbackMode(bool)": EventFragment;
    "FinalizingPriceEpochFailed(address,uint256,uint8)": EventFragment;
    "FtsoAdded(address,bool)": EventFragment;
    "FtsoFallbackMode(address,bool)": EventFragment;
    "InitializingCurrentEpochStateForRevealFailed(address,uint256)": EventFragment;
    "PriceEpochFinalized(address,uint256)": EventFragment;
    "RewardEpochFinalized(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributingRewardsFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalizingPriceEpochFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FtsoAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FtsoFallbackMode"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitializingCurrentEpochStateForRevealFailed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceEpochFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardEpochFinalized"): EventFragment;
}

export class IFtsoManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFtsoManagerInterface;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFtsos(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _ftsos: string[] }>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getPriceSubmitter(overrides?: CallOverrides): Promise<[string]>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  getCurrentPriceEpochData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _priceEpochId: BigNumber;
      _priceEpochStartTimestamp: BigNumber;
      _priceEpochEndTimestamp: BigNumber;
      _priceEpochRevealEndTimestamp: BigNumber;
      _currentTimestamp: BigNumber;
    }
  >;

  getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getFtsos(overrides?: CallOverrides): Promise<string[]>;

  getPriceEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _firstPriceEpochStartTs: BigNumber;
      _priceEpochDurationSeconds: BigNumber;
      _revealEpochDurationSeconds: BigNumber;
    }
  >;

  getPriceSubmitter(overrides?: CallOverrides): Promise<string>;

  getRewardEpochVotePowerBlock(
    _rewardEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsos(overrides?: CallOverrides): Promise<string[]>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getPriceSubmitter(overrides?: CallOverrides): Promise<string>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    DistributingRewardsFailed(
      ftso?: null,
      epochId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ftso: string; epochId: BigNumber }
    >;

    FallbackMode(
      fallbackMode?: null
    ): TypedEventFilter<[boolean], { fallbackMode: boolean }>;

    FinalizingPriceEpochFailed(
      ftso?: null,
      epochId?: null,
      failingType?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { ftso: string; epochId: BigNumber; failingType: number }
    >;

    FtsoAdded(
      ftso?: null,
      add?: null
    ): TypedEventFilter<[string, boolean], { ftso: string; add: boolean }>;

    FtsoFallbackMode(
      ftso?: null,
      fallbackMode?: null
    ): TypedEventFilter<
      [string, boolean],
      { ftso: string; fallbackMode: boolean }
    >;

    InitializingCurrentEpochStateForRevealFailed(
      ftso?: null,
      epochId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ftso: string; epochId: BigNumber }
    >;

    PriceEpochFinalized(
      chosenFtso?: null,
      rewardEpochId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { chosenFtso: string; rewardEpochId: BigNumber }
    >;

    RewardEpochFinalized(
      votepowerBlock?: null,
      startBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { votepowerBlock: BigNumber; startBlock: BigNumber }
    >;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPriceEpochData(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsos(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceSubmitter(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFtsos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceSubmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
