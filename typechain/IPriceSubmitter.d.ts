/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPriceSubmitterInterface extends ethers.utils.Interface {
  functions: {
    "getFtsoManager()": FunctionFragment;
    "getFtsoRegistry()": FunctionFragment;
    "getVoterWhitelister()": FunctionFragment;
    "revealPrices(uint256,uint256[],uint256[],uint256[])": FunctionFragment;
    "submitPriceHashes(uint256,uint256[],bytes32[])": FunctionFragment;
    "voterWhitelistBitmap(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getFtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPrices",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPriceHashes",
    values: [BigNumberish, BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelistBitmap",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPriceHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelistBitmap",
    data: BytesLike
  ): Result;

  events: {
    "PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)": EventFragment;
    "PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceHashesSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricesRevealed"): EventFragment;
}

export class IPriceSubmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPriceSubmitterInterface;

  functions: {
    getFtsoManager(overrides?: CallOverrides): Promise<[string]>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<[string]>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<[string]>;

    revealPrices(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitPriceHashes(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voterWhitelistBitmap(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getFtsoManager(overrides?: CallOverrides): Promise<string>;

  getFtsoRegistry(overrides?: CallOverrides): Promise<string>;

  getVoterWhitelister(overrides?: CallOverrides): Promise<string>;

  revealPrices(
    _epochId: BigNumberish,
    _ftsoIndices: BigNumberish[],
    _prices: BigNumberish[],
    _randoms: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitPriceHashes(
    _epochId: BigNumberish,
    _ftsoIndices: BigNumberish[],
    _hashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voterWhitelistBitmap(
    _voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getFtsoManager(overrides?: CallOverrides): Promise<string>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<string>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<string>;

    revealPrices(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitPriceHashes(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    voterWhitelistBitmap(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    PriceHashesSubmitted(
      submitter?: string | null,
      epochId?: BigNumberish | null,
      ftsos?: null,
      hashes?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, string[], string[], BigNumber],
      {
        submitter: string;
        epochId: BigNumber;
        ftsos: string[];
        hashes: string[];
        timestamp: BigNumber;
      }
    >;

    PricesRevealed(
      voter?: string | null,
      epochId?: BigNumberish | null,
      ftsos?: null,
      prices?: null,
      randoms?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, string[], BigNumber[], BigNumber[], BigNumber],
      {
        voter: string;
        epochId: BigNumber;
        ftsos: string[];
        prices: BigNumber[];
        randoms: BigNumber[];
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    getFtsoManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterWhitelister(overrides?: CallOverrides): Promise<BigNumber>;

    revealPrices(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitPriceHashes(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voterWhitelistBitmap(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFtsoManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFtsoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterWhitelister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealPrices(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _randoms: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitPriceHashes(
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _hashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voterWhitelistBitmap(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
