/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IIFtsoInterface extends ethers.utils.Interface {
  functions: {
    "activateFtso(address,uint256,uint256,uint256)": FunctionFragment;
    "active()": FunctionFragment;
    "averageFinalizePriceEpoch(uint256)": FunctionFragment;
    "configureEpochs(uint256,uint256,uint256,uint256,uint256,uint256,address[])": FunctionFragment;
    "deactivateFtso()": FunctionFragment;
    "epochsConfiguration()": FunctionFragment;
    "finalizePriceEpoch(uint256,bool)": FunctionFragment;
    "forceFinalizePriceEpoch(uint256)": FunctionFragment;
    "getAsset()": FunctionFragment;
    "getAssetFtsos()": FunctionFragment;
    "getCurrentEpochId()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getCurrentRandom()": FunctionFragment;
    "getEpochId(uint256)": FunctionFragment;
    "getEpochPrice(uint256)": FunctionFragment;
    "getEpochPriceForVoter(uint256,address)": FunctionFragment;
    "getPriceEpochConfiguration()": FunctionFragment;
    "getPriceEpochData()": FunctionFragment;
    "getRandom(uint256)": FunctionFragment;
    "getVoteWeightingParameters()": FunctionFragment;
    "initializeCurrentEpochStateForReveal(bool)": FunctionFragment;
    "revealPriceSubmitter(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setAsset(address)": FunctionFragment;
    "setAssetFtsos(address[])": FunctionFragment;
    "setVotePowerBlock(uint256)": FunctionFragment;
    "submitPriceHashSubmitter(address,uint256,bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "updateInitialPrice(uint256,uint256)": FunctionFragment;
    "wNat()": FunctionFragment;
    "wNatVotePowerCached(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activateFtso",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "averageFinalizePriceEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureEpochs",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochsConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePriceEpoch",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "forceFinalizePriceEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPriceForVoter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteWeightingParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCurrentEpochStateForReveal",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revealPriceSubmitter",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAssetFtsos",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPriceHashSubmitter",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateInitialPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wNatVotePowerCached",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "averageFinalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochsConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFinalizePriceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPriceForVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteWeightingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCurrentEpochStateForReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPriceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPriceHashSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInitialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wNatVotePowerCached",
    data: BytesLike
  ): Result;

  events: {
    "LowTurnout(uint256,uint256,uint256,uint256)": EventFragment;
    "PriceEpochInitializedOnFtso(uint256,uint256,uint256)": EventFragment;
    "PriceFinalized(uint256,uint256,bool,uint256,uint256,uint8,uint256)": EventFragment;
    "PriceHashSubmitted(address,uint256,bytes32,uint256)": EventFragment;
    "PriceRevealed(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LowTurnout"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceEpochInitializedOnFtso"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceHashSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRevealed"): EventFragment;
}

export class IIFtso extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIFtsoInterface;

  functions: {
    activateFtso(
      _priceSubmitter: string,
      _firstEpochStartTs: BigNumberish,
      _epochPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    averageFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _trustedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateFtso(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        _maxVotePowerNatThresholdFraction: BigNumber;
        _maxVotePowerAssetThresholdFraction: BigNumber;
        _lowAssetUSDThreshold: BigNumber;
        _highAssetUSDThreshold: BigNumber;
        _highAssetTurnoutThresholdBIPS: BigNumber;
        _lowNatTurnoutThresholdBIPS: BigNumber;
        _trustedAddresses: string[];
      }
    >;

    finalizePriceEpoch(
      _epochId: BigNumberish,
      _returnRewardData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAsset(overrides?: CallOverrides): Promise<[string]>;

    getAssetFtsos(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentRandom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochId(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochPrice(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochPriceForVoter(
      _epochId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstEpochStartTime: BigNumber;
        _submitPeriod: BigNumber;
        _revealPeriod: BigNumber;
      }
    >;

    getPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        _epochId: BigNumber;
        _epochSubmitEndTime: BigNumber;
        _epochRevealEndTime: BigNumber;
        _votePowerBlock: BigNumber;
        _fallbackMode: boolean;
      }
    >;

    getRandom(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assets: string[];
        _assetMultipliers: BigNumber[];
        _totalVotePowerNat: BigNumber;
        _totalVotePowerAsset: BigNumber;
        _assetWeightRatio: BigNumber;
        _votePowerBlock: BigNumber;
      }
    >;

    initializeCurrentEpochStateForReveal(
      _fallbackMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealPriceSubmitter(
      _voter: string,
      _epochId: BigNumberish,
      _price: BigNumberish,
      _random: BigNumberish,
      _wNatVP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetFtsos(
      _assetFtsos: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVotePowerBlock(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitPriceHashSubmitter(
      _sender: string,
      _epochId: BigNumberish,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    updateInitialPrice(
      _initialPriceUSD: BigNumberish,
      _initialPriceTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wNat(overrides?: CallOverrides): Promise<[string]>;

    wNatVotePowerCached(
      _voter: string,
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activateFtso(
    _priceSubmitter: string,
    _firstEpochStartTs: BigNumberish,
    _epochPeriod: BigNumberish,
    _revealPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  active(overrides?: CallOverrides): Promise<boolean>;

  averageFinalizePriceEpoch(
    _epochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureEpochs(
    _maxVotePowerNatThresholdFraction: BigNumberish,
    _maxVotePowerAssetThresholdFraction: BigNumberish,
    _lowAssetUSDThreshold: BigNumberish,
    _highAssetUSDThreshold: BigNumberish,
    _highAssetTurnoutThresholdBIPS: BigNumberish,
    _lowNatTurnoutThresholdBIPS: BigNumberish,
    _trustedAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateFtso(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochsConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[]
    ] & {
      _maxVotePowerNatThresholdFraction: BigNumber;
      _maxVotePowerAssetThresholdFraction: BigNumber;
      _lowAssetUSDThreshold: BigNumber;
      _highAssetUSDThreshold: BigNumber;
      _highAssetTurnoutThresholdBIPS: BigNumber;
      _lowNatTurnoutThresholdBIPS: BigNumber;
      _trustedAddresses: string[];
    }
  >;

  finalizePriceEpoch(
    _epochId: BigNumberish,
    _returnRewardData: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceFinalizePriceEpoch(
    _epochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAsset(overrides?: CallOverrides): Promise<string>;

  getAssetFtsos(overrides?: CallOverrides): Promise<string[]>;

  getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
  >;

  getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochId(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochPrice(
    _epochId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochPriceForVoter(
    _epochId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _firstEpochStartTime: BigNumber;
      _submitPeriod: BigNumber;
      _revealPeriod: BigNumber;
    }
  >;

  getPriceEpochData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      _epochId: BigNumber;
      _epochSubmitEndTime: BigNumber;
      _epochRevealEndTime: BigNumber;
      _votePowerBlock: BigNumber;
      _fallbackMode: boolean;
    }
  >;

  getRandom(
    _epochId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoteWeightingParameters(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
      _assets: string[];
      _assetMultipliers: BigNumber[];
      _totalVotePowerNat: BigNumber;
      _totalVotePowerAsset: BigNumber;
      _assetWeightRatio: BigNumber;
      _votePowerBlock: BigNumber;
    }
  >;

  initializeCurrentEpochStateForReveal(
    _fallbackMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealPriceSubmitter(
    _voter: string,
    _epochId: BigNumberish,
    _price: BigNumberish,
    _random: BigNumberish,
    _wNatVP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAsset(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetFtsos(
    _assetFtsos: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVotePowerBlock(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitPriceHashSubmitter(
    _sender: string,
    _epochId: BigNumberish,
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  updateInitialPrice(
    _initialPriceUSD: BigNumberish,
    _initialPriceTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wNat(overrides?: CallOverrides): Promise<string>;

  wNatVotePowerCached(
    _voter: string,
    _epochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateFtso(
      _priceSubmitter: string,
      _firstEpochStartTs: BigNumberish,
      _epochPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    active(overrides?: CallOverrides): Promise<boolean>;

    averageFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _trustedAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateFtso(overrides?: CallOverrides): Promise<void>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        _maxVotePowerNatThresholdFraction: BigNumber;
        _maxVotePowerAssetThresholdFraction: BigNumber;
        _lowAssetUSDThreshold: BigNumber;
        _highAssetUSDThreshold: BigNumber;
        _highAssetTurnoutThresholdBIPS: BigNumber;
        _lowNatTurnoutThresholdBIPS: BigNumber;
        _trustedAddresses: string[];
      }
    >;

    finalizePriceEpoch(
      _epochId: BigNumberish,
      _returnRewardData: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber] & {
        _eligibleAddresses: string[];
        _natWeights: BigNumber[];
        _totalNatWeight: BigNumber;
      }
    >;

    forceFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAsset(overrides?: CallOverrides): Promise<string>;

    getAssetFtsos(overrides?: CallOverrides): Promise<string[]>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _price: BigNumber; _timestamp: BigNumber }
    >;

    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPrice(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPriceForVoter(
      _epochId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstEpochStartTime: BigNumber;
        _submitPeriod: BigNumber;
        _revealPeriod: BigNumber;
      }
    >;

    getPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        _epochId: BigNumber;
        _epochSubmitEndTime: BigNumber;
        _epochRevealEndTime: BigNumber;
        _votePowerBlock: BigNumber;
        _fallbackMode: boolean;
      }
    >;

    getRandom(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber] & {
        _assets: string[];
        _assetMultipliers: BigNumber[];
        _totalVotePowerNat: BigNumber;
        _totalVotePowerAsset: BigNumber;
        _assetWeightRatio: BigNumber;
        _votePowerBlock: BigNumber;
      }
    >;

    initializeCurrentEpochStateForReveal(
      _fallbackMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revealPriceSubmitter(
      _voter: string,
      _epochId: BigNumberish,
      _price: BigNumberish,
      _random: BigNumberish,
      _wNatVP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsset(_asset: string, overrides?: CallOverrides): Promise<void>;

    setAssetFtsos(
      _assetFtsos: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVotePowerBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitPriceHashSubmitter(
      _sender: string,
      _epochId: BigNumberish,
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    updateInitialPrice(
      _initialPriceUSD: BigNumberish,
      _initialPriceTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wNat(overrides?: CallOverrides): Promise<string>;

    wNatVotePowerCached(
      _voter: string,
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    LowTurnout(
      epochId?: BigNumberish | null,
      natTurnout?: null,
      lowNatTurnoutThresholdBIPS?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        epochId: BigNumber;
        natTurnout: BigNumber;
        lowNatTurnoutThresholdBIPS: BigNumber;
        timestamp: BigNumber;
      }
    >;

    PriceEpochInitializedOnFtso(
      epochId?: BigNumberish | null,
      endTime?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { epochId: BigNumber; endTime: BigNumber; timestamp: BigNumber }
    >;

    PriceFinalized(
      epochId?: BigNumberish | null,
      price?: null,
      rewardedFtso?: null,
      lowRewardPrice?: null,
      highRewardPrice?: null,
      finalizationType?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean, BigNumber, BigNumber, number, BigNumber],
      {
        epochId: BigNumber;
        price: BigNumber;
        rewardedFtso: boolean;
        lowRewardPrice: BigNumber;
        highRewardPrice: BigNumber;
        finalizationType: number;
        timestamp: BigNumber;
      }
    >;

    PriceHashSubmitted(
      submitter?: string | null,
      epochId?: BigNumberish | null,
      hash?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        submitter: string;
        epochId: BigNumber;
        hash: string;
        timestamp: BigNumber;
      }
    >;

    PriceRevealed(
      voter?: string | null,
      epochId?: BigNumberish | null,
      price?: null,
      random?: null,
      timestamp?: null,
      votePowerNat?: null,
      votePowerAsset?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        voter: string;
        epochId: BigNumber;
        price: BigNumber;
        random: BigNumber;
        timestamp: BigNumber;
        votePowerNat: BigNumber;
        votePowerAsset: BigNumber;
      }
    >;
  };

  estimateGas: {
    activateFtso(
      _priceSubmitter: string,
      _firstEpochStartTs: BigNumberish,
      _epochPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    averageFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _trustedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateFtso(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochsConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePriceEpoch(
      _epochId: BigNumberish,
      _returnRewardData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAsset(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetFtsos(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRandom(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPrice(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPriceForVoter(
      _epochId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochData(overrides?: CallOverrides): Promise<BigNumber>;

    getRandom(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteWeightingParameters(overrides?: CallOverrides): Promise<BigNumber>;

    initializeCurrentEpochStateForReveal(
      _fallbackMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealPriceSubmitter(
      _voter: string,
      _epochId: BigNumberish,
      _price: BigNumberish,
      _random: BigNumberish,
      _wNatVP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetFtsos(
      _assetFtsos: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVotePowerBlock(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitPriceHashSubmitter(
      _sender: string,
      _epochId: BigNumberish,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    updateInitialPrice(
      _initialPriceUSD: BigNumberish,
      _initialPriceTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wNat(overrides?: CallOverrides): Promise<BigNumber>;

    wNatVotePowerCached(
      _voter: string,
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateFtso(
      _priceSubmitter: string,
      _firstEpochStartTs: BigNumberish,
      _epochPeriod: BigNumberish,
      _revealPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    averageFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureEpochs(
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _trustedAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateFtso(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochsConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizePriceEpoch(
      _epochId: BigNumberish,
      _returnRewardData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceFinalizePriceEpoch(
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetFtsos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentRandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochId(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPrice(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPriceForVoter(
      _epochId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceEpochData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandom(
      _epochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteWeightingParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeCurrentEpochStateForReveal(
      _fallbackMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealPriceSubmitter(
      _voter: string,
      _epochId: BigNumberish,
      _price: BigNumberish,
      _random: BigNumberish,
      _wNatVP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetFtsos(
      _assetFtsos: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVotePowerBlock(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitPriceHashSubmitter(
      _sender: string,
      _epochId: BigNumberish,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateInitialPrice(
      _initialPriceUSD: BigNumberish,
      _initialPriceTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wNat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wNatVotePowerCached(
      _voter: string,
      _epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
