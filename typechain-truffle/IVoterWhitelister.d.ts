/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IVoterWhitelisterContract
  extends Truffle.Contract<IVoterWhitelisterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVoterWhitelisterInstance>;
}

export interface VoterRemovedFromWhitelist {
  name: "VoterRemovedFromWhitelist";
  args: {
    voter: string;
    ftsoIndex: BN;
    0: string;
    1: BN;
  };
}

export interface VoterWhitelisted {
  name: "VoterWhitelisted";
  args: {
    voter: string;
    ftsoIndex: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = VoterRemovedFromWhitelist | VoterWhitelisted;

export interface IVoterWhitelisterInstance extends Truffle.ContractInstance {
  defaultMaxVotersForFtso(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getFtsoWhitelistedPriceProviders(
    _ftsoIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getFtsoWhitelistedPriceProvidersBySymbol(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  maxVotersForFtso(
    _ftsoIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  requestFullVoterWhitelisting: {
    (_voter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: boolean[] }>;
    sendTransaction(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestWhitelistingVoter: {
    (
      _voter: string,
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _voter: string,
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _voter: string,
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    defaultMaxVotersForFtso(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    maxVotersForFtso(
      _ftsoIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    requestFullVoterWhitelisting: {
      (_voter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN[]; 1: boolean[] }>;
      sendTransaction(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestWhitelistingVoter: {
      (
        _voter: string,
        _ftsoIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _voter: string,
        _ftsoIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _voter: string,
        _ftsoIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        _ftsoIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
