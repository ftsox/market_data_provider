/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockFtsoRegistryContract
  extends Truffle.Contract<MockFtsoRegistryInstance> {
  "new"(
    _governance: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockFtsoRegistryInstance>;
}

export interface GovernanceProposed {
  name: "GovernanceProposed";
  args: {
    proposedGovernance: string;
    0: string;
  };
}

export interface GovernanceUpdated {
  name: "GovernanceUpdated";
  args: {
    oldGovernance: string;
    newGoveranance: string;
    0: string;
    1: string;
  };
}

type AllEvents = GovernanceProposed | GovernanceUpdated;

export interface MockFtsoRegistryInstance extends Truffle.ContractInstance {
  addFtso: {
    (_ftsoContract: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _ftsoContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _ftsoContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ftsoContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimGovernance: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getAllFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getFtso(
    _assetIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFtsoBySymbol(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFtsoHistory(
    _assetIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getFtsoIndex(
    _symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getFtsoSymbol(
    _assetIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFtsos(
    _assetIndices: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getSupportedFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getSupportedIndices(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  getSupportedIndicesAndFtsos(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: string[] }>;

  getSupportedIndicesAndSymbols(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: string[] }>;

  getSupportedIndicesSymbolsAndFtsos(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: string[]; 2: string[] }>;

  getSupportedSymbols(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getSupportedSymbolsAndFtsos(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: string[] }>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialise: {
    (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeGovernance: {
    (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposedGovernance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeFtso: {
    (_ftso: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_ftso: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _ftso: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _ftso: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferGovernance: {
    (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addFtso: {
      (_ftsoContract: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _ftsoContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _ftsoContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _ftsoContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimGovernance: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getAllFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getFtso(
      _assetIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFtsoBySymbol(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFtsoHistory(
      _assetIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getFtsoIndex(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getFtsoSymbol(
      _assetIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFtsos(
      _assetIndices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getSupportedFtsos(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getSupportedIndices(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

    getSupportedIndicesAndFtsos(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: string[] }>;

    getSupportedIndicesAndSymbols(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: string[] }>;

    getSupportedIndicesSymbolsAndFtsos(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: string[]; 2: string[] }>;

    getSupportedSymbols(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getSupportedSymbolsAndFtsos(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialise: {
      (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    proposeGovernance: {
      (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    proposedGovernance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeFtso: {
      (_ftso: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _ftso: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _ftso: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _ftso: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferGovernance: {
      (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "getCurrentPrice(string)"(
      _symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    "getCurrentPrice(uint256)"(
      _assetIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
