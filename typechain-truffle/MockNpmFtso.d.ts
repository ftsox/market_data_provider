/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockNpmFtsoContract
  extends Truffle.Contract<MockNpmFtsoInstance> {
  "new"(
    _symbol: string,
    _priceSubmitter: string,
    _firstEpochStartTime: number | BN | string,
    _submitPeriod: number | BN | string,
    _revealPeriod: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockNpmFtsoInstance>;
}

export interface LowTurnout {
  name: "LowTurnout";
  args: {
    epochId: BN;
    natTurnout: BN;
    lowNatTurnoutThresholdBIPS: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface PriceEpochInitializedOnFtso {
  name: "PriceEpochInitializedOnFtso";
  args: {
    epochId: BN;
    endTime: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface PriceFinalized {
  name: "PriceFinalized";
  args: {
    epochId: BN;
    price: BN;
    rewardedFtso: boolean;
    lowRewardPrice: BN;
    highRewardPrice: BN;
    finalizationType: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: boolean;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface PriceHashSubmitted {
  name: "PriceHashSubmitted";
  args: {
    submitter: string;
    epochId: BN;
    hash: string;
    timestamp: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
  };
}

export interface PriceRevealed {
  name: "PriceRevealed";
  args: {
    voter: string;
    epochId: BN;
    price: BN;
    random: BN;
    timestamp: BN;
    votePowerNat: BN;
    votePowerAsset: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

type AllEvents =
  | LowTurnout
  | PriceEpochInitializedOnFtso
  | PriceFinalized
  | PriceHashSubmitted
  | PriceRevealed;

export interface MockNpmFtsoInstance extends Truffle.ContractInstance {
  ASSET_PRICE_USD_DECIMALS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  activateFtso(
    arg0: string,
    arg1: number | BN | string,
    arg2: number | BN | string,
    arg3: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  assetFtsos(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assets(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  averageFinalizePriceEpoch(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  configureEpochs(
    arg0: number | BN | string,
    arg1: number | BN | string,
    arg2: number | BN | string,
    arg3: number | BN | string,
    arg4: number | BN | string,
    arg5: number | BN | string,
    arg6: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  deactivateFtso(txDetails?: Truffle.TransactionDetails): Promise<void>;

  epochsConfiguration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: string[] }>;

  finalizePriceEpoch(
    arg0: number | BN | string,
    arg1: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[]; 2: BN }>;

  forceFinalizePriceEpoch(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  getAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAssetFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getCurrentEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentPrice(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getEpochId(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getEpochPrice(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getEpochPriceForVoter(
    _epochId: number | BN | string,
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPriceEpochConfiguration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getPriceEpochData(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

  getRandom(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoteWeightingParameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[]; 2: BN; 3: BN; 4: BN; 5: BN }>;

  initializeCurrentEpochStateForReveal(
    arg0: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  priceSubmitter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  revealPriceSubmitter: {
    (
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _random: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _random: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _random: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      _epochId: number | BN | string,
      _price: number | BN | string,
      _random: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAsset(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;

  setAssetFtsos(
    arg0: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setVotePowerBlock(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  submitPriceHashSubmitter: {
    (
      _sender: string,
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _sender: string,
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _sender: string,
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _sender: string,
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  updateInitialPrice(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wNatVotePowerCached: {
    (
      _owner: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _owner: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    ASSET_PRICE_USD_DECIMALS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    activateFtso(
      arg0: string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    assetFtsos(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assets(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    averageFinalizePriceEpoch(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    configureEpochs(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      arg6: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    deactivateFtso(txDetails?: Truffle.TransactionDetails): Promise<void>;

    epochsConfiguration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: string[] }>;

    finalizePriceEpoch(
      arg0: number | BN | string,
      arg1: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN }>;

    forceFinalizePriceEpoch(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    getAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAssetFtsos(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getCurrentEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentPrice(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getEpochId(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getEpochPrice(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getEpochPriceForVoter(
      _epochId: number | BN | string,
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPriceEpochConfiguration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getPriceEpochData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

    getRandom(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoteWeightingParameters(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN; 3: BN; 4: BN; 5: BN }>;

    initializeCurrentEpochStateForReveal(
      arg0: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    priceSubmitter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    revealPriceSubmitter: {
      (
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _random: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _random: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _random: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        _epochId: number | BN | string,
        _price: number | BN | string,
        _random: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAsset(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    setAssetFtsos(
      arg0: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    setVotePowerBlock(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    submitPriceHashSubmitter: {
      (
        _sender: string,
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _sender: string,
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _sender: string,
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _sender: string,
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    updateInitialPrice(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wNatVotePowerCached: {
      (
        _owner: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _owner: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        _epochId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
